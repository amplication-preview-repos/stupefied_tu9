/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RepricingRule } from "./RepricingRule";
import { RepricingRuleCountArgs } from "./RepricingRuleCountArgs";
import { RepricingRuleFindManyArgs } from "./RepricingRuleFindManyArgs";
import { RepricingRuleFindUniqueArgs } from "./RepricingRuleFindUniqueArgs";
import { CreateRepricingRuleArgs } from "./CreateRepricingRuleArgs";
import { UpdateRepricingRuleArgs } from "./UpdateRepricingRuleArgs";
import { DeleteRepricingRuleArgs } from "./DeleteRepricingRuleArgs";
import { Product } from "../../product/base/Product";
import { RepricingRuleService } from "../repricingRule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RepricingRule)
export class RepricingRuleResolverBase {
  constructor(
    protected readonly service: RepricingRuleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "read",
    possession: "any",
  })
  async _repricingRulesMeta(
    @graphql.Args() args: RepricingRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RepricingRule])
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "read",
    possession: "any",
  })
  async repricingRules(
    @graphql.Args() args: RepricingRuleFindManyArgs
  ): Promise<RepricingRule[]> {
    return this.service.repricingRules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RepricingRule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "read",
    possession: "own",
  })
  async repricingRule(
    @graphql.Args() args: RepricingRuleFindUniqueArgs
  ): Promise<RepricingRule | null> {
    const result = await this.service.repricingRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RepricingRule)
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "create",
    possession: "any",
  })
  async createRepricingRule(
    @graphql.Args() args: CreateRepricingRuleArgs
  ): Promise<RepricingRule> {
    return await this.service.createRepricingRule({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RepricingRule)
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "update",
    possession: "any",
  })
  async updateRepricingRule(
    @graphql.Args() args: UpdateRepricingRuleArgs
  ): Promise<RepricingRule | null> {
    try {
      return await this.service.updateRepricingRule({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RepricingRule)
  @nestAccessControl.UseRoles({
    resource: "RepricingRule",
    action: "delete",
    possession: "any",
  })
  async deleteRepricingRule(
    @graphql.Args() args: DeleteRepricingRuleArgs
  ): Promise<RepricingRule | null> {
    try {
      return await this.service.deleteRepricingRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: RepricingRule
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
