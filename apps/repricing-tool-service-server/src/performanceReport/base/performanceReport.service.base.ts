/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PerformanceReport as PrismaPerformanceReport,
  Product as PrismaProduct,
} from "@prisma/client";

export class PerformanceReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformanceReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performanceReport.count(args);
  }

  async performanceReports(
    args: Prisma.PerformanceReportFindManyArgs
  ): Promise<PrismaPerformanceReport[]> {
    return this.prisma.performanceReport.findMany(args);
  }
  async performanceReport(
    args: Prisma.PerformanceReportFindUniqueArgs
  ): Promise<PrismaPerformanceReport | null> {
    return this.prisma.performanceReport.findUnique(args);
  }
  async createPerformanceReport(
    args: Prisma.PerformanceReportCreateArgs
  ): Promise<PrismaPerformanceReport> {
    return this.prisma.performanceReport.create(args);
  }
  async updatePerformanceReport(
    args: Prisma.PerformanceReportUpdateArgs
  ): Promise<PrismaPerformanceReport> {
    return this.prisma.performanceReport.update(args);
  }
  async deletePerformanceReport(
    args: Prisma.PerformanceReportDeleteArgs
  ): Promise<PrismaPerformanceReport> {
    return this.prisma.performanceReport.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.performanceReport
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
