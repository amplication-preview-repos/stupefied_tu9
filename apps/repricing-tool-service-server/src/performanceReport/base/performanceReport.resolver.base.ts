/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PerformanceReport } from "./PerformanceReport";
import { PerformanceReportCountArgs } from "./PerformanceReportCountArgs";
import { PerformanceReportFindManyArgs } from "./PerformanceReportFindManyArgs";
import { PerformanceReportFindUniqueArgs } from "./PerformanceReportFindUniqueArgs";
import { CreatePerformanceReportArgs } from "./CreatePerformanceReportArgs";
import { UpdatePerformanceReportArgs } from "./UpdatePerformanceReportArgs";
import { DeletePerformanceReportArgs } from "./DeletePerformanceReportArgs";
import { Product } from "../../product/base/Product";
import { PerformanceReportService } from "../performanceReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PerformanceReport)
export class PerformanceReportResolverBase {
  constructor(
    protected readonly service: PerformanceReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "read",
    possession: "any",
  })
  async _performanceReportsMeta(
    @graphql.Args() args: PerformanceReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PerformanceReport])
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "read",
    possession: "any",
  })
  async performanceReports(
    @graphql.Args() args: PerformanceReportFindManyArgs
  ): Promise<PerformanceReport[]> {
    return this.service.performanceReports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PerformanceReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "read",
    possession: "own",
  })
  async performanceReport(
    @graphql.Args() args: PerformanceReportFindUniqueArgs
  ): Promise<PerformanceReport | null> {
    const result = await this.service.performanceReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceReport)
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "create",
    possession: "any",
  })
  async createPerformanceReport(
    @graphql.Args() args: CreatePerformanceReportArgs
  ): Promise<PerformanceReport> {
    return await this.service.createPerformanceReport({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PerformanceReport)
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "update",
    possession: "any",
  })
  async updatePerformanceReport(
    @graphql.Args() args: UpdatePerformanceReportArgs
  ): Promise<PerformanceReport | null> {
    try {
      return await this.service.updatePerformanceReport({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PerformanceReport)
  @nestAccessControl.UseRoles({
    resource: "PerformanceReport",
    action: "delete",
    possession: "any",
  })
  async deletePerformanceReport(
    @graphql.Args() args: DeletePerformanceReportArgs
  ): Promise<PerformanceReport | null> {
    try {
      return await this.service.deletePerformanceReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: PerformanceReport
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
