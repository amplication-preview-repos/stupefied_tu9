/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PerformanceReportService } from "../performanceReport.service";
import { PerformanceReportCreateInput } from "./PerformanceReportCreateInput";
import { PerformanceReportWhereInput } from "./PerformanceReportWhereInput";
import { PerformanceReportWhereUniqueInput } from "./PerformanceReportWhereUniqueInput";
import { PerformanceReportFindManyArgs } from "./PerformanceReportFindManyArgs";
import { PerformanceReportUpdateInput } from "./PerformanceReportUpdateInput";
import { PerformanceReport } from "./PerformanceReport";

export class PerformanceReportGrpcControllerBase {
  constructor(protected readonly service: PerformanceReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceReport })
  @GrpcMethod("PerformanceReportService", "createPerformanceReport")
  async createPerformanceReport(
    @common.Body() data: PerformanceReportCreateInput
  ): Promise<PerformanceReport> {
    return await this.service.createPerformanceReport({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        competitorAnalysis: true,
        createdAt: true,
        id: true,
        pricingHistory: true,

        product: {
          select: {
            id: true,
          },
        },

        sales: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceReport] })
  @ApiNestedQuery(PerformanceReportFindManyArgs)
  @GrpcMethod("PerformanceReportService", "performanceReports")
  async performanceReports(
    @common.Req() request: Request
  ): Promise<PerformanceReport[]> {
    const args = plainToClass(PerformanceReportFindManyArgs, request.query);
    return this.service.performanceReports({
      ...args,
      select: {
        competitorAnalysis: true,
        createdAt: true,
        id: true,
        pricingHistory: true,

        product: {
          select: {
            id: true,
          },
        },

        sales: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PerformanceReportService", "performanceReport")
  async performanceReport(
    @common.Param() params: PerformanceReportWhereUniqueInput
  ): Promise<PerformanceReport | null> {
    const result = await this.service.performanceReport({
      where: params,
      select: {
        competitorAnalysis: true,
        createdAt: true,
        id: true,
        pricingHistory: true,

        product: {
          select: {
            id: true,
          },
        },

        sales: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PerformanceReportService", "updatePerformanceReport")
  async updatePerformanceReport(
    @common.Param() params: PerformanceReportWhereUniqueInput,
    @common.Body() data: PerformanceReportUpdateInput
  ): Promise<PerformanceReport | null> {
    try {
      return await this.service.updatePerformanceReport({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          competitorAnalysis: true,
          createdAt: true,
          id: true,
          pricingHistory: true,

          product: {
            select: {
              id: true,
            },
          },

          sales: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PerformanceReportService", "deletePerformanceReport")
  async deletePerformanceReport(
    @common.Param() params: PerformanceReportWhereUniqueInput
  ): Promise<PerformanceReport | null> {
    try {
      return await this.service.deletePerformanceReport({
        where: params,
        select: {
          competitorAnalysis: true,
          createdAt: true,
          id: true,
          pricingHistory: true,

          product: {
            select: {
              id: true,
            },
          },

          sales: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
