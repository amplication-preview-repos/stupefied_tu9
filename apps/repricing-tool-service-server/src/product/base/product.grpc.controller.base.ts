/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ProductService } from "../product.service";
import { ProductCreateInput } from "./ProductCreateInput";
import { ProductWhereInput } from "./ProductWhereInput";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { Product } from "./Product";
import { CompetitorFindManyArgs } from "../../competitor/base/CompetitorFindManyArgs";
import { Competitor } from "../../competitor/base/Competitor";
import { CompetitorWhereUniqueInput } from "../../competitor/base/CompetitorWhereUniqueInput";
import { PerformanceReportFindManyArgs } from "../../performanceReport/base/PerformanceReportFindManyArgs";
import { PerformanceReport } from "../../performanceReport/base/PerformanceReport";
import { PerformanceReportWhereUniqueInput } from "../../performanceReport/base/PerformanceReportWhereUniqueInput";
import { RepricingRuleFindManyArgs } from "../../repricingRule/base/RepricingRuleFindManyArgs";
import { RepricingRule } from "../../repricingRule/base/RepricingRule";
import { RepricingRuleWhereUniqueInput } from "../../repricingRule/base/RepricingRuleWhereUniqueInput";

export class ProductGrpcControllerBase {
  constructor(protected readonly service: ProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  @GrpcMethod("ProductService", "createProduct")
  async createProduct(
    @common.Body() data: ProductCreateInput
  ): Promise<Product> {
    return await this.service.createProduct({
      data: data,
      select: {
        buyBoxStatus: true,
        createdAt: true,
        currentPrice: true,
        id: true,
        name: true,
        stockLevel: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @ApiNestedQuery(ProductFindManyArgs)
  @GrpcMethod("ProductService", "products")
  async products(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.products({
      ...args,
      select: {
        buyBoxStatus: true,
        createdAt: true,
        currentPrice: true,
        id: true,
        name: true,
        stockLevel: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProductService", "product")
  async product(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.product({
      where: params,
      select: {
        buyBoxStatus: true,
        createdAt: true,
        currentPrice: true,
        id: true,
        name: true,
        stockLevel: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProductService", "updateProduct")
  async updateProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.updateProduct({
        where: params,
        data: data,
        select: {
          buyBoxStatus: true,
          createdAt: true,
          currentPrice: true,
          id: true,
          name: true,
          stockLevel: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProductService", "deleteProduct")
  async deleteProduct(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.deleteProduct({
        where: params,
        select: {
          buyBoxStatus: true,
          createdAt: true,
          currentPrice: true,
          id: true,
          name: true,
          stockLevel: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/competitors")
  @ApiNestedQuery(CompetitorFindManyArgs)
  @GrpcMethod("ProductService", "findManyCompetitors")
  async findManyCompetitors(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Competitor[]> {
    const query = plainToClass(CompetitorFindManyArgs, request.query);
    const results = await this.service.findCompetitors(params.id, {
      ...query,
      select: {
        competitorPrice: true,
        createdAt: true,
        id: true,
        marketCondition: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/competitors")
  @GrpcMethod("ProductService", "connectCompetitors")
  async connectCompetitors(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CompetitorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitors: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/competitors")
  @GrpcMethod("ProductService", "updateCompetitors")
  async updateCompetitors(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CompetitorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitors: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/competitors")
  @GrpcMethod("ProductService", "disconnectCompetitors")
  async disconnectCompetitors(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CompetitorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitors: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/performanceReports")
  @ApiNestedQuery(PerformanceReportFindManyArgs)
  @GrpcMethod("ProductService", "findManyPerformanceReports")
  async findManyPerformanceReports(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<PerformanceReport[]> {
    const query = plainToClass(PerformanceReportFindManyArgs, request.query);
    const results = await this.service.findPerformanceReports(params.id, {
      ...query,
      select: {
        competitorAnalysis: true,
        createdAt: true,
        id: true,
        pricingHistory: true,

        product: {
          select: {
            id: true,
          },
        },

        sales: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/performanceReports")
  @GrpcMethod("ProductService", "connectPerformanceReports")
  async connectPerformanceReports(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PerformanceReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performanceReports: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/performanceReports")
  @GrpcMethod("ProductService", "updatePerformanceReports")
  async updatePerformanceReports(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PerformanceReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performanceReports: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/performanceReports")
  @GrpcMethod("ProductService", "disconnectPerformanceReports")
  async disconnectPerformanceReports(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: PerformanceReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      performanceReports: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/repricingRules")
  @ApiNestedQuery(RepricingRuleFindManyArgs)
  @GrpcMethod("ProductService", "findManyRepricingRules")
  async findManyRepricingRules(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<RepricingRule[]> {
    const query = plainToClass(RepricingRuleFindManyArgs, request.query);
    const results = await this.service.findRepricingRules(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        maximumPrice: true,
        minimumPrice: true,

        product: {
          select: {
            id: true,
          },
        },

        ruleDescription: true,
        targetProfitMargin: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/repricingRules")
  @GrpcMethod("ProductService", "connectRepricingRules")
  async connectRepricingRules(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: RepricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repricingRules: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/repricingRules")
  @GrpcMethod("ProductService", "updateRepricingRules")
  async updateRepricingRules(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: RepricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repricingRules: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/repricingRules")
  @GrpcMethod("ProductService", "disconnectRepricingRules")
  async disconnectRepricingRules(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: RepricingRuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repricingRules: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
