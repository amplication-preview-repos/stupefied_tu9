/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { RepricingRuleService } from "../repricingRule.service";
import { RepricingRuleCreateInput } from "./RepricingRuleCreateInput";
import { RepricingRuleWhereInput } from "./RepricingRuleWhereInput";
import { RepricingRuleWhereUniqueInput } from "./RepricingRuleWhereUniqueInput";
import { RepricingRuleFindManyArgs } from "./RepricingRuleFindManyArgs";
import { RepricingRuleUpdateInput } from "./RepricingRuleUpdateInput";
import { RepricingRule } from "./RepricingRule";

export class RepricingRuleGrpcControllerBase {
  constructor(protected readonly service: RepricingRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RepricingRule })
  @GrpcMethod("RepricingRuleService", "createRepricingRule")
  async createRepricingRule(
    @common.Body() data: RepricingRuleCreateInput
  ): Promise<RepricingRule> {
    return await this.service.createRepricingRule({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        maximumPrice: true,
        minimumPrice: true,

        product: {
          select: {
            id: true,
          },
        },

        ruleDescription: true,
        targetProfitMargin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RepricingRule] })
  @ApiNestedQuery(RepricingRuleFindManyArgs)
  @GrpcMethod("RepricingRuleService", "repricingRules")
  async repricingRules(
    @common.Req() request: Request
  ): Promise<RepricingRule[]> {
    const args = plainToClass(RepricingRuleFindManyArgs, request.query);
    return this.service.repricingRules({
      ...args,
      select: {
        createdAt: true,
        id: true,
        maximumPrice: true,
        minimumPrice: true,

        product: {
          select: {
            id: true,
          },
        },

        ruleDescription: true,
        targetProfitMargin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RepricingRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RepricingRuleService", "repricingRule")
  async repricingRule(
    @common.Param() params: RepricingRuleWhereUniqueInput
  ): Promise<RepricingRule | null> {
    const result = await this.service.repricingRule({
      where: params,
      select: {
        createdAt: true,
        id: true,
        maximumPrice: true,
        minimumPrice: true,

        product: {
          select: {
            id: true,
          },
        },

        ruleDescription: true,
        targetProfitMargin: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RepricingRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RepricingRuleService", "updateRepricingRule")
  async updateRepricingRule(
    @common.Param() params: RepricingRuleWhereUniqueInput,
    @common.Body() data: RepricingRuleUpdateInput
  ): Promise<RepricingRule | null> {
    try {
      return await this.service.updateRepricingRule({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          maximumPrice: true,
          minimumPrice: true,

          product: {
            select: {
              id: true,
            },
          },

          ruleDescription: true,
          targetProfitMargin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RepricingRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RepricingRuleService", "deleteRepricingRule")
  async deleteRepricingRule(
    @common.Param() params: RepricingRuleWhereUniqueInput
  ): Promise<RepricingRule | null> {
    try {
      return await this.service.deleteRepricingRule({
        where: params,
        select: {
          createdAt: true,
          id: true,
          maximumPrice: true,
          minimumPrice: true,

          product: {
            select: {
              id: true,
            },
          },

          ruleDescription: true,
          targetProfitMargin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
